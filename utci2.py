import math
import pandas as pd

#Calculo do UTCI
def calc_UTCI(Ta : float, ehPa : float, va : float) -> float:
    dTmrt: float = 0
    es : float = 6.112*math.exp((17.67 * Ta) / (Ta + 243.5))
    Pa : float = ehPa*es/1000
    c =[
        6.07562052e-01, -2.27712343e-02, 8.06470249e-04, -1.54271372e-04, -3.24651735e-06,
        7.32602852e-08, 1.35959073e-09, -2.25836520e+00, 8.80326035e-02, 2.16844454e-03,
        -1.53347087e-05, -5.72983704e-07, -2.55090145e-09, -7.51269505e-01, -4.08350271e-03,
        -5.21670675e-05, 1.94544667e-06, 1.14099531e-08, 1.58137256e-01, -6.57263143e-05,
        2.22697524e-07, -4.16117031e-08, -1.27762753e-02, 9.66891875e-06, 2.52785852e-09,
        4.56306672e-04, -1.74202546e-07, -5.91491269e-06 , 3.98374029e-01, 1.83945314e-04,
        -1.73754510e-04, -7.60781159e-07 , 3.77830287e-08, 5.43079673e-10, -2.00518269e-02,
        8.92859837e-04, 3.45433048e-06, -3.77925774e-07, -1.69699377e-09, 1.69992415e-04,
        -4.99204314e-05, 2.47417178e-07, 1.07596466e-08, 8.49242932e-05, 1.35191328e-06,
        -6.21531254e-09, -4.99410301e-06, -1.89489258e-08, 8.15300114e-08 , 7.55043090e-04,
        -5.65095215e-05, -4.52166564e-07, 2.46688878e-08, 2.42674348e-10, 1.54547250e-04,
        5.24110970e-06, -8.75874982e-08, -1.50743064e-09, -1.56236307e-05, -1.33895614e-07,
        2.49709824e-09, 6.51711721e-07, 1.94960053e-09, -1.00361113e-08, -1.21206673e-05,
        -2.18203660e-07, 7.51269482e-09, 9.79063848e-11, 1.25006734e-06, -1.81584736e-09,
        -3.52197671e-10, -3.36514630e-08, 1.35908359e-10, 4.17032620e-10, -1.30369025e-09,
        4.13908461e-10, 9.22652254e-12 , -5.08220384e-09, -2.24730961e-11,  1.17139133e-10,
        6.62154879e-10, 4.03863260e-13, 1.95087203e-12, -4.73602469e-12, 5.12733497e+00,
        -3.12788561e-01, -1.96701861e-02, 9.99690870e-04, 9.51738512e-06, -4.66426341e-07,
        5.48050612e-01, -3.30552823e-03, -1.64119440e-03, -5.16670694e-06, 9.52692432e-07,
        -4.29223622e-02, 5.00845667e-03, 1.00601257e-06, -1.81748644e-06, -1.25813502e-03,
        -1.79330391e-04, 2.34994441e-06, 1.29735808e-04, 1.29064870e-06, -2.28558686e-06,
        -3.69476348e-02, 1.62325322e-03, -3.14279680e-05, 2.59835559e-06, -4.77136523e-08,
        8.64203390e-03, -6.87405181e-04, -9.13863872e-06, 5.15916806e-07, -3.59217476e-05,
        3.28696511e-05, -7.10542454e-07, -1.24382300e-05, -7.38584400e-09, 2.20609296e-07,
        -7.32469180e-04, -1.87381964e-05, 4.80925239e-06, -8.75492040e-08, 2.77862930e-05,
        -5.06004592e-06, 1.14325367e-07 , 2.53016723e-06, -1.72857035e-08, -3.95079398e-08,
        -3.59413173e-07, 7.04388046e-07, -1.89309167e-08, -4.79768731e-07, 7.96079978e-09,
        1.62897058e-09, 3.94367674e-08, -1.18566247e-09, 3.34678041e-10, -1.15606447e-10,
        -2.80626406e+00, 5.48712484e-01, -3.99428410e-03, -9.54009191e-04 , 1.93090978e-05,
        -3.08806365e-01, 1.16952364e-02, 4.95271903e-04, -1.90710882e-05, 2.10787756e-03,
        -6.98445738e-04, 2.30109073e-05, 4.17856590e-04, -1.27043871e-05, -3.04620472e-06,
        5.14507424e-02, -4.32510997e-03, 8.99281156e-05, -7.14663943e-07, -2.66016305e-04,
        2.63789586e-04, -7.01199003e-06, -1.06823306e-04, 3.61341136e-06, 2.29748967e-07,
        3.04788893e-04, -6.42070836e-05, 1.16257971e-06, 7.68023384e-06, -5.47446896e-07,
        -3.59937910e-08, -4.36497725e-06, 1.68737969e-07,  2.67489271e-08, 3.23926897e-09,
        -3.53874123e-02, -2.21201190e-01, 1.55126038e-02, -2.63917279e-04, 4.53433455e-02,
        -4.32943862e-03, 1.45389826e-04, 2.17508610e-04, -6.66724702e-05, 3.33217140e-05,
        -2.26921615e-03, 3.80261982e-04, -5.45314314e-09, -7.96355448e-04, 2.53458034e-05,
        -6.31223658e-06, 3.02122035e-04, -4.77403547e-06, 1.73825715e-06, -4.09087898e-07,
        6.14155345e-01, -6.16755931e-02, 1.33374846e-03, 3.55375387e-03, -5.13027851e-04,
        1.02449757e-04, -1.48526421e-03, -4.11469183e-05, -6.80434415e-06 , -9.77675906e-06,
        8.82773108e-02, -3.01859306e-03, 1.04452989e-03, 2.47090539e-04, 1.48348065e-03
    ]

    temp = Ta
    i = 0
    j = 0
    k = 0
    l = 0
    m = 0
    # Calculando o UTCI com base na f√≥rmula e coeficientes
    while (j <= 6):  # Pa
        k=0
        while (k <= 6-j):  # dTmrt
            l=0
            while (l<=6-j-k):  # va
                m=0
                while (m <= 6-j-k-l):  # Ta
                    temp += c[i] * Ta**m * va**l * dTmrt**k * Pa**j
                    i += 1
                    m+=1
                l+=1
            k+=1
        j+=1
    return temp

# MAIN

rows = int(input("Digite a quantidade de linhas da tabela: "))
tabela_nome = input("Digite o nome da tabela: ")

col0 = input("Digite o nome da coluna de data e hora: ")
col1 = input("Digite o nome da coluna da velocidade do vento: ")
col2 = input("Digite o nome da coluna da umidade relativa: ")
col3 = input("Digite o nome da coluna da temperatura do ar: ")

print("Lendo " + tabela_nome + "...")

tabela = pd.read_excel(tabela_nome)

Vel = [None]*rows
Umi = [None]*rows
Temp = [None]*rows
Utci = [None]*rows
data_hora = [None]*rows
i = 0

while i < rows:
    data_hora[i] = tabela.loc[i, col0]
    Vel[i] = tabela.loc[i, col1]
    Umi[i] = tabela.loc[i, col2]
    Temp[i] = tabela.loc[i, col3]

    Utci[i] = round(calc_UTCI(Temp[i], Umi[i], Vel[i]), 2)

    i+=1

d = {'Data e Hora': data_hora, 'Velocidade do ar': Vel, 'Umidade Relativa': Umi, 'Temperatura do ar': Temp, 'UTCI': Utci}

UTCI_data = pd.DataFrame(
    data = d
)

UTCI_data.to_excel(
    'Resultado_UTCI.xlsx',
    index=False
)

print ("Valores calculados com sucesso!!!")